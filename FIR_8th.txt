`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 04/12/2021 10:44:46 AM
// Design Name: 
// Module Name: fir_8th_project
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


// -------------------------------------------------------------
//
// Module: filter_8th_project
// Generated by MATLAB(R) 8.3 and the Filter Design HDL Coder 2.9.5.
// Generated on: 2021-04-12 10:24:11
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetDirectory: D:\Study\Buet Msc\Adv VLSI
// Name: filter_8th_project
// TargetLanguage: Verilog
// TestBenchStimulus: impulse step ramp chirp noise 

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Multipliers           : 9
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 9
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// -------------------------------------------------------------



module filter_8th_project
               (
                clk,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   reset; 
  input  signed [31:0] filter_in; //double
  output signed [63:0] filter_out; //double
  wire signed [63:0] Data_out;
////////////////////////////////////////////////////////////////
//Module Architecture: filter_8th_project
////////////////////////////////////////////////////////////////
wire signed [31:0] coeff1,coeff2,coeff3,coeff4,coeff5,coeff6,coeff7,coeff8,coeff9;

   assign coeff1=32'b11111111111111111111000010101001 ;
   assign coeff2=32'b11111111111111111010110011000110 ;
   assign coeff3=32'b00000000000000000110110011100001 ;
   assign coeff4=32'b00000000000001000101101101000001 ;
   assign coeff5=32'b00000000000001110011010011011110 ;
   assign coeff6=32'b00000000000001000101101101000001 ;
   assign coeff7=32'b00000000000000000110110011100001 ;
   assign coeff8=32'b11111111111111111010110011000110 ;
   assign coeff9=32'b11111111111111111111000010101001 ;

  reg signed [63:0] Samples[1:8];
  
  integer k;
  
  assign Data_out=coeff1*filter_in+coeff2*Samples[1]+coeff3*Samples[2]+coeff4*Samples[3]+coeff5*Samples[4]+coeff6*Samples[5]+coeff7*Samples[6]+coeff8*Samples[7]+coeff9*Samples[8];
  assign filter_out = Data_out>>>20;
  always @ (posedge clk)
  begin
      if (reset==1) 
      begin
          for (k=1;k<=8;k=k+1) begin
              Samples [k]<=0; 
          end
      end
      else 
      begin
          Samples[1]<=filter_in;
          for (k=2;k<=8;k=k+1) begin
              Samples[k]<=Samples[k-1];
          end
      end
  end
  // Assignment Statements
  
endmodule  // filter_8th_project

